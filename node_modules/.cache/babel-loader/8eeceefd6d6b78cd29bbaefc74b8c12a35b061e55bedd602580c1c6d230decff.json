{"ast":null,"code":"var _jsxFileName = \"/Users/smike/Documents/GitHub/442-Group-3-Spring-2023/Code/enviro_tracker/src/Components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useEffect, useState } from \"react\";\nimport { MapContainer } from 'react-leaflet/MapContainer';\nimport { Marker } from 'react-leaflet/Marker';\nimport { Popup } from 'react-leaflet/Popup';\nimport { TileLayer } from 'react-leaflet/TileLayer';\nimport { useMap } from 'react-leaflet/hooks';\nimport \"../CSS/Map.css\";\nimport { getLiveData, generateMockData } from \"../db/dbFuncs.ts\";\nimport { db } from \"../db/dbInstance\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map() {\n  _s();\n  // This whole code block is temporary AF this pulls the data from the DB\n  // ideally this should be a part of some scheduler i.e. once an hour\n  const [data, setData] = useState();\n\n  // useEffect(() => {\n  //   async function pullData() {\n  //     let d = await getLiveData(db);\n\n  //     setData(d);\n  //   };\n\n  //   pullData();\n\n  // }, []);\n  // End of concurrent database querying\n\n  // {\n  //   \"IePlFjuMpgFnGvKZDRgi\": {\n  //       \"long\": \"-87.64712811866409\",\n  //       \"data\": {\n  //           \"pm25\": \"44\",\n  //           \"voc\": \"12\",\n  //           \"temp\": \"33\",\n  //           \"CO2\": \"25\",\n  //           \"ozone\": \"125\",\n  //           \"humidity\": \"92\"\n  //       },\n  //       \"timestamp\": \"2/13/2023\",\n  //       \"lat\": \"41.86579351612219\"\n  //   }\n  // }\n\n  // Understand this and you will understand the meaning of life\n  useEffect(() => {\n    // changed to use memo so it doesn't wait for a render\n    setData(generateMockData()); // set the data on the initial load\n  }, []);\n\n  // access data, make sure its loaded first though\n  /*if(data != undefined)\n  {\n    //console.log(data);            // you'll notice this stuff prints twice, since React.Strict is on it will render twice\n    // console.log(data[\"KONGDOG\"]); // see -> shorturl.at/cwER3  \n    //console.log(data[\"KONGDOG\"][\"long\"]); // etc. etc...\n    // console.log(data[\"KONGDOG\"][\"data\"][\"pm25\"]);\n  }*/\n\n  let markers = [];\n  for (const key in data) {\n    markers.push( /*#__PURE__*/_jsxDEV(Marker, {\n      position: [data[key][\"lat\"], data[key][\"long\"]],\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: [key, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this), \" pm25: \", data[key][\"data\"][\"pm25\"], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this), \" voc: \", data[key][\"data\"][\"voc\"], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), \" temp: \", data[key][\"data\"][\"temp\"], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this), \" CO2: \", data[key][\"data\"][\"CO2\"], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this), \" ozone: \", data[key][\"data\"][\"ozone\"], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this), \" humidity: \", data[key][\"data\"][\"humidity\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [41.86877130657323, -87.64863209188573],\n      zoom: 16,\n      scrollWheelZoom: false,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: markers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(Map, \"WZ2PO9A64oHRexE1CE+yX3ebuoA=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useMemo","useEffect","useState","MapContainer","Marker","Popup","TileLayer","useMap","getLiveData","generateMockData","db","Map","data","setData","markers","key","push"],"sources":["/Users/smike/Documents/GitHub/442-Group-3-Spring-2023/Code/enviro_tracker/src/Components/Map.js"],"sourcesContent":["import React, { useMemo, useEffect, useState } from \"react\";\nimport { MapContainer } from 'react-leaflet/MapContainer'\nimport { Marker } from 'react-leaflet/Marker'\nimport { Popup } from 'react-leaflet/Popup'\nimport { TileLayer } from 'react-leaflet/TileLayer'\nimport { useMap } from 'react-leaflet/hooks'\n\nimport \"../CSS/Map.css\";\n\nimport { getLiveData, generateMockData } from \"../db/dbFuncs.ts\"\nimport { db } from \"../db/dbInstance\"\n\nfunction Map() {\n  \n  // This whole code block is temporary AF this pulls the data from the DB\n  // ideally this should be a part of some scheduler i.e. once an hour\n  const [data, setData] = useState();\n\n  // useEffect(() => {\n  //   async function pullData() {\n  //     let d = await getLiveData(db);\n    \n  //     setData(d);\n  //   };\n\n  //   pullData();\n\n  // }, []);\n  // End of concurrent database querying\n\n  // {\n  //   \"IePlFjuMpgFnGvKZDRgi\": {\n  //       \"long\": \"-87.64712811866409\",\n  //       \"data\": {\n  //           \"pm25\": \"44\",\n  //           \"voc\": \"12\",\n  //           \"temp\": \"33\",\n  //           \"CO2\": \"25\",\n  //           \"ozone\": \"125\",\n  //           \"humidity\": \"92\"\n  //       },\n  //       \"timestamp\": \"2/13/2023\",\n  //       \"lat\": \"41.86579351612219\"\n  //   }\n  // }\n\n  // Understand this and you will understand the meaning of life\n  useEffect(()=> {                          // changed to use memo so it doesn't wait for a render\n    setData(generateMockData());          // set the data on the initial load\n  }, []);\n\n  // access data, make sure its loaded first though\n  /*if(data != undefined)\n  {\n    //console.log(data);            // you'll notice this stuff prints twice, since React.Strict is on it will render twice\n    // console.log(data[\"KONGDOG\"]); // see -> shorturl.at/cwER3  \n    //console.log(data[\"KONGDOG\"][\"long\"]); // etc. etc...\n    // console.log(data[\"KONGDOG\"][\"data\"][\"pm25\"]);\n  }*/\n\n  let markers = [];\n  for (const key in data) {\n    markers.push(\n    <Marker position={[data[key][\"lat\"], data[key][\"long\"]]}>\n      <Popup>\n        {key}\n        <br/> pm25: {data[key][\"data\"][\"pm25\"]}\n        <br/> voc: {data[key][\"data\"][\"voc\"]}\n        <br/> temp: {data[key][\"data\"][\"temp\"]}\n        <br/> CO2: {data[key][\"data\"][\"CO2\"]}\n        <br/> ozone: {data[key][\"data\"][\"ozone\"]}\n        <br/> humidity: {data[key][\"data\"][\"humidity\"]}\n      </Popup>\n    </Marker>\n    )\n  }\n\n  return (\n    <div id='map'>\n        <MapContainer center={[41.86877130657323, -87.64863209188573]} zoom={16} scrollWheelZoom={false}>\n            <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"/>\n            <ul>{markers}</ul>\n        </MapContainer>\n    </div>\n  );\n}\n\nexport default Map;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,MAAM,QAAQ,qBAAqB;AAE5C,OAAO,gBAAgB;AAEvB,SAASC,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,EAAE,QAAQ,kBAAkB;AAAA;AAErC,SAASC,GAAG,GAAG;EAAA;EAEb;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,EAAE;;EAElC;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACAD,SAAS,CAAC,MAAK;IAA2B;IACxCY,OAAO,CAACJ,gBAAgB,EAAE,CAAC,CAAC,CAAU;EACxC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE,IAAIK,OAAO,GAAG,EAAE;EAChB,KAAK,MAAMC,GAAG,IAAIH,IAAI,EAAE;IACtBE,OAAO,CAACE,IAAI,eACZ,QAAC,MAAM;MAAC,QAAQ,EAAE,CAACJ,IAAI,CAACG,GAAG,CAAC,CAAC,KAAK,CAAC,EAAEH,IAAI,CAACG,GAAG,CAAC,CAAC,MAAM,CAAC,CAAE;MAAA,uBACtD,QAAC,KAAK;QAAA,WACHA,GAAG,eACJ;UAAA;UAAA;UAAA;QAAA,QAAK,WAAO,EAACH,IAAI,CAACG,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,eACtC;UAAA;UAAA;UAAA;QAAA,QAAK,UAAM,EAACH,IAAI,CAACG,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,eACpC;UAAA;UAAA;UAAA;QAAA,QAAK,WAAO,EAACH,IAAI,CAACG,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,eACtC;UAAA;UAAA;UAAA;QAAA,QAAK,UAAM,EAACH,IAAI,CAACG,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,eACpC;UAAA;UAAA;UAAA;QAAA,QAAK,YAAQ,EAACH,IAAI,CAACG,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,eACxC;UAAA;UAAA;UAAA;QAAA,QAAK,eAAW,EAACH,IAAI,CAACG,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA;IACxC;MAAA;MAAA;MAAA;IAAA,QACD,CACR;EACH;EAEA,oBACE;IAAK,EAAE,EAAC,KAAK;IAAA,uBACT,QAAC,YAAY;MAAC,MAAM,EAAE,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,CAAE;MAAC,IAAI,EAAE,EAAG;MAAC,eAAe,EAAE,KAAM;MAAA,wBAC5F,QAAC,SAAS;QACV,WAAW,EAAC,yFAAyF;QACrG,GAAG,EAAC;MAAoD;QAAA;QAAA;QAAA;MAAA,QAAE,eAC1D;QAAA,UAAKD;MAAO;QAAA;QAAA;QAAA;MAAA,QAAM;IAAA;MAAA;MAAA;MAAA;IAAA;EACP;IAAA;IAAA;IAAA;EAAA,QACb;AAEV;AAAC,GA3EQH,GAAG;AAAA,KAAHA,GAAG;AA6EZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}