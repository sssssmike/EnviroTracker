{"ast":null,"code":"import { collection, getDocs, addDoc } from \"firebase/firestore\";\nimport { getDatabase } from \"firebase/database\";\nimport mockdata from './mockdata.json';\nconst rtdatabase = getDatabase();\n\n/*\n * Methodology for maintaining devices\n *  devices/documentid/field\n *  fields:\n *      - data (map)                    # data coming from sensor\n *          |_ CO2      (string)\n *          |_ humidity (string) \n *          |_ ozone    (string)\n *          |_ pm25     (string)\n *          |_ temp     (string)\n *          |_ voc      (string)\n *      - lat (string)                  # latitude\n *      - long (string)                 # longitude\n *      - timestamp (string)            # last updated\n * \n *   Exact representation:\n *  \n *    {\n        \"IePlFjuMpgFnGvKZDRgi\": \n        {\n            \"long\": \"-87.64712811866409\",\n            \"data\": {\n                \"pm25\": \"44\",\n                \"voc\": \"12\",\n                \"temp\": \"33\",\n                \"CO2\": \"25\",\n                \"ozone\": \"125\",\n                \"humidity\": \"92\"\n            },\n            \"timestamp\": \"2/13/2023\",\n            \"lat\": \"41.86579351612219\"\n        }\n      }\n * \n * \n * \n * \n * \n *      For future release maybe add a history here?\n *      - dates (map)\n *        |_data (array) <- data for a given date called ex. 2/13/2023_21:20:32\n *          |_[CO2, humidity, ozone, pm25, temp, voc]\n *        |_data (array) <- date and time\n *          |_[CO2, humidity, ozone, pm25, temp, voc]\n *        |_data (array) <- date and time\n *          |_[CO2, humidity, ozone, pm25, temp, voc]\n *  \n * \n * \n*/\n\n// Returns the document id which is how its referenced / accessed in the db\nasync function registerDevice(db) {\n  let d = new Date();\n  const docRef = await addDoc(collection(db, \"devices\"), {\n    data: {\n      CO2: \"nan\",\n      humidity: \"nan\",\n      ozone: \"nan\",\n      pm25: \"nan\",\n      temp: \"nan\",\n      voc: \"nan\"\n    },\n    lat: \"nan\",\n    long: \"nan\",\n    timestamp: d.toString()\n  });\n  return docRef.id;\n}\n\n// Live data\nasync function getStoredData(db) {\n  // let arr: Array<{[name:string]: Object}> = [];\n  let dict = {};\n  const querySnapshot = await getDocs(collection(db, \"devices\"));\n  querySnapshot.forEach(doc => {\n    let docid = String(doc.id);\n    // let dict = { [docid] : doc.data() };\n    dict[docid] = doc.data();\n\n    // arr.push(dict);\n  });\n\n  return dict; // returns javascript object of {deviceid : devicedata}\n}\n\nasync function getLiveData(db) {\n  let arr = [];\n  const querySnapshot = await getDocs(collection(db, \"devices\"));\n  querySnapshot.forEach(doc => {\n    let docid = String(doc.id);\n    let dict = {\n      [docid]: doc.data()\n    };\n    arr.push(dict);\n  });\n  return arr; // returns and array of {deviceid : devicedata}\n}\n\nfunction generateMockData() {\n  //   {\n  //     \"IePlFjuMpgFnGvKZDRgi\": {\n  //         \"long\": \"-87.64712811866409\",\n  //         \"data\": {\n  //             \"pm25\": \"44\",\n  //             \"voc\": \"12\",\n  //             \"temp\": \"33\",\n  //             \"CO2\": \"25\",\n  //             \"ozone\": \"125\",\n  //             \"humidity\": \"92\"\n  //         },\n  //         \"timestamp\": \"2/13/2023\",\n  //         \"lat\": \"41.86579351612219\"\n  //     }\n  // }\n  let data = mockdata;\n  return data;\n}\nexport { getLiveData, generateMockData, getStoredData };","map":{"version":3,"names":["collection","getDocs","addDoc","getDatabase","mockdata","rtdatabase","registerDevice","db","d","Date","docRef","data","CO2","humidity","ozone","pm25","temp","voc","lat","long","timestamp","toString","id","getStoredData","dict","querySnapshot","forEach","doc","docid","String","getLiveData","arr","push","generateMockData"],"sources":["/Users/smike/Documents/GitHub/442-Group-3-Spring-2023/Code/enviro_tracker/src/db/dbFuncs.ts"],"sourcesContent":["import {\n    collection,\n    query,\n    doc,\n    setDoc,\n    getDoc,\n    getDocFromCache,\n    getDocs,\n    addDoc,\n  } from \"firebase/firestore\";\n\nimport { getDatabase, ref, onValue } from \"firebase/database\";\n\nimport mockdata from './mockdata.json';\n\nconst rtdatabase = getDatabase();\n\n/*\n * Methodology for maintaining devices\n *  devices/documentid/field\n *  fields:\n *      - data (map)                    # data coming from sensor\n *          |_ CO2      (string)\n *          |_ humidity (string) \n *          |_ ozone    (string)\n *          |_ pm25     (string)\n *          |_ temp     (string)\n *          |_ voc      (string)\n *      - lat (string)                  # latitude\n *      - long (string)                 # longitude\n *      - timestamp (string)            # last updated\n * \n *   Exact representation:\n *  \n *    {\n        \"IePlFjuMpgFnGvKZDRgi\": \n        {\n            \"long\": \"-87.64712811866409\",\n            \"data\": {\n                \"pm25\": \"44\",\n                \"voc\": \"12\",\n                \"temp\": \"33\",\n                \"CO2\": \"25\",\n                \"ozone\": \"125\",\n                \"humidity\": \"92\"\n            },\n            \"timestamp\": \"2/13/2023\",\n            \"lat\": \"41.86579351612219\"\n        }\n      }\n * \n * \n * \n * \n * \n *      For future release maybe add a history here?\n *      - dates (map)\n *        |_data (array) <- data for a given date called ex. 2/13/2023_21:20:32\n *          |_[CO2, humidity, ozone, pm25, temp, voc]\n *        |_data (array) <- date and time\n *          |_[CO2, humidity, ozone, pm25, temp, voc]\n *        |_data (array) <- date and time\n *          |_[CO2, humidity, ozone, pm25, temp, voc]\n *  \n * \n * \n*/\n\n\n\n\n// Returns the document id which is how its referenced / accessed in the db\nasync function registerDevice(db) {\n\n  let d = new Date();\n\n  const docRef = await addDoc(collection(db, \"devices\"), {\n    data: {CO2: \"nan\", humidity: \"nan\", ozone: \"nan\", pm25: \"nan\", temp: \"nan\", voc: \"nan\"},\n    lat: \"nan\",\n    long: \"nan\",\n    timestamp: d.toString()\n  }); \n\n  return docRef.id;\n}\n\n// Live data\nasync function getStoredData(db) {\n  \n  // let arr: Array<{[name:string]: Object}> = [];\n  let dict = { }\n\n  const querySnapshot = await getDocs(collection(db, \"devices\"));\n  querySnapshot.forEach((doc) => {\n    let docid = String(doc.id)\n    // let dict = { [docid] : doc.data() };\n    dict[docid] = doc.data();\n\n    // arr.push(dict);\n  });\n\n  return dict;  // returns javascript object of {deviceid : devicedata}\n}\n\nasync function getLiveData(db) {\n  let arr: Array<{[name:string]: Object}> = [];\n  \n  const querySnapshot = await getDocs(collection(db, \"devices\"));\n  querySnapshot.forEach((doc) => {\n    let docid = String(doc.id)\n    let dict = { [docid] : doc.data() };\n    arr.push(dict);\n  });\n\n  return arr;  // returns and array of {deviceid : devicedata}\n}\n\nfunction generateMockData() {\n//   {\n//     \"IePlFjuMpgFnGvKZDRgi\": {\n//         \"long\": \"-87.64712811866409\",\n//         \"data\": {\n//             \"pm25\": \"44\",\n//             \"voc\": \"12\",\n//             \"temp\": \"33\",\n//             \"CO2\": \"25\",\n//             \"ozone\": \"125\",\n//             \"humidity\": \"92\"\n//         },\n//         \"timestamp\": \"2/13/2023\",\n//         \"lat\": \"41.86579351612219\"\n//     }\n// }\n  let data = mockdata;\n\n  return data;\n}\n\nexport {getLiveData , generateMockData, getStoredData}"],"mappings":"AAAA,SACIA,UAAU,EAMVC,OAAO,EACPC,MAAM,QACD,oBAAoB;AAE7B,SAASC,WAAW,QAAsB,mBAAmB;AAE7D,OAAOC,QAAQ,MAAM,iBAAiB;AAEtC,MAAMC,UAAU,GAAGF,WAAW,EAAE;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA,eAAeG,cAAc,CAACC,EAAE,EAAE;EAEhC,IAAIC,CAAC,GAAG,IAAIC,IAAI,EAAE;EAElB,MAAMC,MAAM,GAAG,MAAMR,MAAM,CAACF,UAAU,CAACO,EAAE,EAAE,SAAS,CAAC,EAAE;IACrDI,IAAI,EAAE;MAACC,GAAG,EAAE,KAAK;MAAEC,QAAQ,EAAE,KAAK;MAAEC,KAAK,EAAE,KAAK;MAAEC,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAE,KAAK;MAAEC,GAAG,EAAE;IAAK,CAAC;IACvFC,GAAG,EAAE,KAAK;IACVC,IAAI,EAAE,KAAK;IACXC,SAAS,EAAEZ,CAAC,CAACa,QAAQ;EACvB,CAAC,CAAC;EAEF,OAAOX,MAAM,CAACY,EAAE;AAClB;;AAEA;AACA,eAAeC,aAAa,CAAChB,EAAE,EAAE;EAE/B;EACA,IAAIiB,IAAI,GAAG,CAAE,CAAC;EAEd,MAAMC,aAAa,GAAG,MAAMxB,OAAO,CAACD,UAAU,CAACO,EAAE,EAAE,SAAS,CAAC,CAAC;EAC9DkB,aAAa,CAACC,OAAO,CAAEC,GAAG,IAAK;IAC7B,IAAIC,KAAK,GAAGC,MAAM,CAACF,GAAG,CAACL,EAAE,CAAC;IAC1B;IACAE,IAAI,CAACI,KAAK,CAAC,GAAGD,GAAG,CAAChB,IAAI,EAAE;;IAExB;EACF,CAAC,CAAC;;EAEF,OAAOa,IAAI,CAAC,CAAE;AAChB;;AAEA,eAAeM,WAAW,CAACvB,EAAE,EAAE;EAC7B,IAAIwB,GAAmC,GAAG,EAAE;EAE5C,MAAMN,aAAa,GAAG,MAAMxB,OAAO,CAACD,UAAU,CAACO,EAAE,EAAE,SAAS,CAAC,CAAC;EAC9DkB,aAAa,CAACC,OAAO,CAAEC,GAAG,IAAK;IAC7B,IAAIC,KAAK,GAAGC,MAAM,CAACF,GAAG,CAACL,EAAE,CAAC;IAC1B,IAAIE,IAAI,GAAG;MAAE,CAACI,KAAK,GAAID,GAAG,CAAChB,IAAI;IAAG,CAAC;IACnCoB,GAAG,CAACC,IAAI,CAACR,IAAI,CAAC;EAChB,CAAC,CAAC;EAEF,OAAOO,GAAG,CAAC,CAAE;AACf;;AAEA,SAASE,gBAAgB,GAAG;EAC5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACE,IAAItB,IAAI,GAAGP,QAAQ;EAEnB,OAAOO,IAAI;AACb;AAEA,SAAQmB,WAAW,EAAGG,gBAAgB,EAAEV,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}